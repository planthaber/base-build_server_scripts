#! /bin/bash
#
# Goes into all jenkins jobs and generate the complete documentation. It assumes
# that the API documentation has already been generated by the rock_build
# script.
#
# It expects two arguments
#
#  rock_doc WORKSPACE_ROOT FLAVOR_AXIS
#
#  The WORKSPACE_ROOT argument is the path to the root of the jenkins workspace
#  The FLAVOR_AXIS argument is the Jenkins axis that holds Rock's flavor. If
#    unset, the documentation will not be "flavored"
#
# Its behaviour is modified by the following environment variables:
#   EXCLUDED_PROJECTS: comma-separated list of projects that should be ignored
#   FORCE_DOC_GEN: if true, the documentation will be generated even if
#     the build did not get updated since the last documentation got
#     generated. Otherwise, the script will simply return success.
#     This should be used when the website or one of the documentation
#     generation scripts got changed
#   REF_AUTOPROJ_INSTALL: the autoproj installation whose code should be used to
#     generate documentation. Defaults to the one in $PWD/dev

set -ex
export LANG=en_US.UTF-8

WORKSPACE_ROOT=$1
FLAVOR_AXIS=$2

if test -n "$FLAVOR_AXIS"; then
    roots=`find $WORKSPACE_ROOT -name $FLAVOR_AXIS -type d -prune`
    for root_dir in $roots; do
        project_name=`echo "$root_dir" | sed "s#$WORKSPACE_ROOT/##"`
        project_name=`echo "$project_name" | sed "s#/.*##"`
        if echo "$EXCLUDED_PROJECTS" | grep -q "\(^\|,\)$project_name\($\|,\)"; then
            continue
        fi
        available_flavors=""
        for flavor_dir in $root_dir/*; do
            if find "$flavor_dir" -name 'dev' -type d -prune; then
                flavor_name=`basename $flavor_dir`
                if test -z "$available_flavors"; then
                    available_flavors="$flavor_name"
                else
                    available_flavors="$available_flavors $flavor_name"
                fi
            fi
        done
        echo "$project_name available flavors: $available_flavors"

        for flavor_name in $available_flavors; do
            for dev_dir in `find "$root_dir/$flavor_name" -name dev -type d -prune`; do
                build_dir=`dirname "$dev_dir"`

                ( set +e
                   cd $build_dir
                   FLAVOR_NAME=$flavor_name AVAILABLE_FLAVORS=$available_flavors `dirname $0`/rock_doc
                ) >> $build_dir/docgen.txt 2>&1
                if test "$?" -ne "0"; then
                    echo "generation failed for $dev_dir"
                    echo "log in $project_name-$flavor_name.txt"
                    result=1
                else
                    touch $build_dir/docgen.stamp
                fi
            done
            cp $build_dir/docgen.txt $project_name-$flavor_name.txt
        done
    done
else
    dev_dirs=`find $WORKSPACE_ROOT -name dev -type d -prune`
    for dev_dir in $dev_dirs; do
        build_dir=`dirname $dev_dir`
        project_name=`echo "$build_dir" | sed "s#$WORKSPACE_ROOT/##"`
        project_name=`echo "$project_name" | sed "s#/.*##"`
        if echo "$EXCLUDED_PROJECTS" | grep -q "^$project_name$"; then
            continue
        fi
        ( cd $build_dir
           `dirname $0`/rock_doc
        ) >> $build_dir/docgen.txt 2>&1
        if test "$?" -ne "0"; then
            echo "generation failed for $build_dir"
            echo "log in $project_name.txt"
            result=1
        else
            touch $build_dir/docgen.stamp
        fi
        cp $build_dir/docgen.txt $project_name.txt
    done
fi

echo "Result of document generation"
exit $result

