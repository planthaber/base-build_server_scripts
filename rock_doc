#! /bin/bash
#
# Generates the Rock website for the build in $PWD/dev. It assumes
# that the API documentation has already been generated by the rock_build
# script.
#
# Its behaviour is modified by the following environment variables:
#
#   FORCE_DOC_GEN: if true, the documentation will be generated even if
#     the build did not get updated since the last documentation got
#     generated. Otherwise, the script will simply return success.
#     This should be used when the website or one of the documentation
#     generation scripts got changed
#   REF_AUTOPROJ_INSTALL: the autoproj installation whose code should be used to
#     generate documentation. Defaults to the one in $PWD/dev
#   FLAVOR_NAME: the name of the flavor this build is based on. Use only if you
#     wish that the documentation gets "flavored" (i.e. that flavor links
#     appear). Note that the AVAILABLE_FLAVORS variable should be set as well
#   AVAILABLE_FLAVORS: comma-separated list of flavors this project is part of.
#     See the documentation of FLAVOR_NAME
#

build_dir=$PWD

set -ex

if ! test -f dev/doc-successful; then
    echo "last build in $build_dir did not generate documentation, skipping"
    exit 0
fi

if test "x$FORCE_DOC_GEN" = "xtrue"; then
    rm -f docgen.stamp
elif test -f docgen.stamp && test docgen.stamp -nt dev/doc-successful; then
    echo "build in $build_dir did not get updated since last time. Skipping ..."
    exit 0
fi

echo "generating documentation for $build_dir"
rm -rf doc
mkdir doc
cp -r api doc

if test -z "$REF_AUTOPROJ_INSTALL"; then
    ref_install_root=$build_dir/dev
else
    ref_install_root=$REF_AUTOPROJ_INSTALL
fi

if test -n "$FLAVOR_NAME"; then
    export ROCK_DOC_FLAVORED=$FLAVOR_NAME:$AVAILABLE_FLAVORS
    if test "$FLAVOR_NAME" = "master"; then
        directory_status="--status=master:next"
    elif test "$FLAVOR_NAME" = "next"; then
        directory_status="--status=next:stable"
    fi
    ref_install_root=`echo $ref_install_root | sed "s/FLAVOR_NAME/$FLAVOR_NAME"`
else
    ref_install_root=`echo $ref_install_root | sed 's/FLAVOR_NAME/master'`
    unset ROCK_DOC_FLAVORED
fi

# Install admin_scripts
source $ref_install_root/env.sh
( cd $ref_install_root
  aup --no-color --no-progress base/admin_scripts base/doc)
# Trick autoproj to think that we're setup for the current directory
export AUTOPROJ_CURRENT_ROOT=`grep 'AUTOPROJ_CURRENT_ROOT=' $build_dir/dev/env.sh | sed 's/.*AUTOPROJ_CURRENT_ROOT=//'`
export PATH=$ref_install_root/base/admin_scripts/bin:$PATH
export RUBYLIB=$ref_install_root/base/admin_scripts/lib:$RUBYLIB

gem install webgen coderay --no-rdoc --no-ri

tempdir=$(mktemp -d)
echo "creating rock's main documentation in $tempdir/main"
git clone $ref_install_root/base/doc $tempdir/main

cd $build_dir/dev
rock-directory-pages $directory_status "$tempdir/main/src" $build_dir/doc/api

cd $tempdir/main
webgen --version
webgen
echo "moving main documentation in $build_dir/doc"
mv out/* $build_dir/doc

echo "deleting $tempdir"
rm -rf $tempdir

