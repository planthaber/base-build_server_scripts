#! /bin/sh -ex

# This script allows to publish documentation generated by rock_doc_all
#
# Its behaviour is modified by the following environment variables:
#   SOURCE_DIR: the directory in which the documentation has been generated
#   TARGET_DIR: the directory in which the documentation should be generated
#   TEMPLATE_DIR: the template directory for the whole published website
#   RELEASE: sets the build name rock-roboticd-org/release is forwarded to
#
# It should be provided a set of arguments of the form
#   source_dir:target_dir
#
# where source_dir is one directory relative to SOURCE_DIR
#   and target_dir where it gets copied in TARGET_DIR

set -ex

# Backup original website directory 
if test -d $TARGET_DIR; then
    rsync -r --delete $TARGET_DIR/ $TARGET_DIR-old/
fi

if test -n "$TEMPLATE_GIT"; then
    if test -d $TEMPLATE_DIR; then
         (
          cd $TEMPLATE_DIR;
          git remote update;
          git reset --hard origin/master;
         )
    else
        git clone $TEMPLATE_GIT $TEMPLATE_DIR
    fi
fi

if test -n "$TEMPLATE_DIR"; then
    rsync -r --exclude '.git' $TEMPLATE_DIR/ $TARGET_DIR
else
    mkdir $TARGET_DIR
fi

echo "RewriteRule ^/$RELEASE(.*) /release/\$1 [R=302]" >> $TARGET_DIR/.htaccess

#other exceptions from forwarding, the release sting is not handled twice
echo "RewriteCond %{REQUEST_URI} !^/google" >> $TARGET_DIR/.htaccess
echo "RewriteCond %{REQUEST_URI} !^/archives" >> $TARGET_DIR/.htaccess
echo "RewriteCond %{REQUEST_URI} !^/status" >> $TARGET_DIR/.htaccess
echo "RewriteCond %{REQUEST_URI} !^/autoproj_bootstrap" >> $TARGET_DIR/.htaccess

for source in "$@"; do
    target_dir=`echo $source | sed 's/.*://'`
    echo "RewriteCond %{REQUEST_URI} !^/($target_dir)" >> $TARGET_DIR/.htaccess
done

#all on top level goes to release
echo "RewriteRule ^(.*)   /release/\$1  [R=302]" >> $TARGET_DIR/.htaccess

for source in "$@"; do
    source_dir=`echo $source | sed 's/:.*//'`
    target_dir=`echo $source | sed 's/.*://'`

    source_path=$SOURCE_DIR/$source_dir

    # Check whether there *is* documentation, and do a quick sanity check
    # - when we don't have a new documentation then fallback to the old one
    if ! ( test -d $source_path/ && test -f $source_path/index.html && test -f $source_path/autoproj_bootstrap ); then
        if test -d $TARGET_DIR-old/$target_dir; then
            source_path=$TARGET_DIR-old/$target_dir
        else
            echo "no data available for $source_dir:$target_dir"
            exit 1
        fi
    fi

    # Extract documentation and api from each flavor to our 'export' 
    # directory 
    rsync -r --delete $source_path/ $TARGET_DIR/$target_dir/
    echo "RewriteRule ^$target_dir/autoproj_bootstrap$ https://raw.githubusercontent.com/rock-core/autoproj/stable/bin/autoproj_bootstrap [R=301]" >> $TARGET_DIR/.htaccess
    echo "RewriteRule ^$target_dir/autoproj_bootstrap-dev$ https://raw.githubusercontent.com/rock-core/autoproj/master/bin/autoproj_bootstrap [R=301]" >> $TARGET_DIR/.htaccess
done



# Fix permissions
chmod u=rwX -R ./
chmod go=rX -R ./

# Copy the main documentation first
( cd www; lftp -c "open $TARGET_URL && mirror -v -R --only-newer --parallel=8 --delete --exclude status/ ./ www/" )
#( cd www; lftp -c "open $TARGET_URL && mirror -R --delete ./ www/" )

