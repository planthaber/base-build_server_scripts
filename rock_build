#! /bin/bash
#
# Main build script in all build server jobs
#
# All arguments are passed to the autoproj_bootstrap script
#
# Control environment variables. All of these except CONFIG_DIR and CONFIG_NAME
# can be set by creating a $CONFIG_NAME.config shell file in $CONFIG_DIR (see
# the description of these two variables for more information)
#
#   SKIP_SUCCESSFUL: if set to true, any build show last result was successful
#                    is ignored. The default is false.
#   MODE:
#       full-bootstrap: remove the complete dev/ directory and bootstrap fresh
#       bootstrap: keep the currently checked out code in dev/. Just delete all
#                  build byproducts, gems and autoproj configuration
#       incremental: builds from the current state of dev/. If the build has
#                    been cleaned last time, the job is ignored
#       auto: do a bootstrap if dev/ is clean and otherwise do an incremental
#             build
#
#   DOCGEN: if set to true, the API documentation is generated
#   CLEAN_IF_SUCCESSFUL: remove all build byproducts if the build finishes
#                        successfully (useful to keep disk usage low)
#
#   CONFIG_DIR: directory where configuration files are stored. For each given
#     config name (see CONFIG_NAME below), a $CONFIG_NAME.config file is sourced
#     at the beginning of this shell script if it exists, and a $CONFIG_NAME.yml
#     file is used as the autoproj configuration file. It defaults to the
#     directory containing this script.
#   CONFIG_NAME: the name of the files to look for when loading configuration.
#     If the configuration files cannot be found, the corresponding default
#     config is searched as well. The default config name is obtained by
#     replacing the part before the first dash by "default". For instance
#     rock-master becomes default-master
#   RUBY: full path to the ruby executable to use
#   GEM: full path to the gem executable to use
#   BOOTSTRAP_URL: path to the autoproj bootstrap script to run (defaults to
#     rock-robotics.org/autoproj_bootstrap)
#   AUTOPROJ_OSDEPS_MODE: the mode in which to run the autoproj subsystem
#     (defaults to 'all')

echo "$0 started at `date`"

set -ex


# The directory in which configuration files are stored
if test -z "$CONFIG_DIR"; then
    CONFIG_DIR=$(dirname $0)
fi
if test -z "$CONFIG_NAME"; then
    CONFIG_NAME=default-master
fi

default_config_name=`echo $CONFIG_NAME | sed 's/.*-\(.*\)/default-\1/'`

if test -f $CONFIG_DIR/$CONFIG_NAME.config; then
  . $CONFIG_DIR/$CONFIG_NAME.config
elif test -f $CONFIG_DIR/$default_config_name.config; then
  . $CONFIG_DIR/$default_config_name.config
fi

if test -f $CONFIG_DIR/$CONFIG_NAME.yml; then
  configfile=$CONFIG_DIR/$CONFIG_NAME.yml
else
  configfile=$CONFIG_DIR/$default_config_name.yml
fi

if test -z "$BOOTSTRAP_URL"; then
    BOOTSTRAP_URL=http://rock-robotics.org/autoproj_bootstrap
fi

if test -z "$AUTOPROJ_OSDEPS_MODE"; then
    AUTOPROJ_OSDEPS_MODE=all
fi

if test "x$SKIP_SUCCESSFUL" = "xtrue" && test -d dev; then
    if test -f dev/successful; then
        if test "x$DOCGEN" != "xtrue" || test -f dev/doc-successful; then
            echo "last build was successful and SKIP_SUCCESSFUL is set, doing nothing"
            exit 0
        else
            MODE=incremental
        fi
    fi
fi

if test -z "$RUBY"; then
    RUBY=ruby1.9.1
fi
if test -z "$GEM"; then
    GEM=gem1.9.1
fi
if test -z "$MODE"; then
    MODE=auto
fi

if test "x$MODE" = "xincremental"; then
    echo "MODE=incremental, doing an incremental build"
    do_incremental=1
    do_full_cleanup=0
elif test "x$MODE" = "xfull-bootstrap"; then
    echo "MODE=full-bootstrap, doing a full build, including checking out packages"
    do_incremental=0
    do_full_cleanup=1
elif test "x$MODE" = "xbootstrap"; then
    echo "MODE=bootstrap, doing a full build but not checking out packages again. Use full-bootstrap for that"
    do_incremental=0
    do_full_cleanup=0
elif test -d dev && ! test -f dev/successful; then
    echo "last build was unsuccessful, doing an incremental build"
    do_incremental=1
    do_full_cleanup=0
else
    echo "doing a full build"
    do_incremental=0
    do_full_cleanup=0
fi

if test "x$do_incremental" = "x1" && test -f dev/cleaned; then
    echo "this is an incremental build, but the last build got cleaned, doing nothing"
    exit 0
fi

rm -f dev/successful
rm -f dev/doc-successful
rm -f dev/cleaned
rm -f docgen.txt
rm -rf api

# If the current dev/install folder has a cache of the downloaded archives, then
# save it
if test -d dev/install/cache; then
    mkdir -p archive_cache
    rsync -a dev/install/cache/ archive_cache/
fi

if test "x$do_incremental" = "x0"; then
    if test "x$do_full_cleanup" = "x1"; then
        rm -rf dev
    elif test -d dev; then
        rm -rf dev/install
        find dev -type d -name build -exec rm -rf {} \; -prune
        rm -rf dev/.gems dev/autoproj
    fi
fi

# Always delete autoproj's configuration directory so that we always start fresh
# Otherwise, it would not get updated
rm -rf dev/autoproj dev/.remotes

# If there is an archive cache, copy it into our working directory
if test -d archive_cache; then
    mkdir -p dev/install/cache
    rsync -a archive_cache/ dev/install/cache/
fi

export GEM_HOME=$PWD/dev/.gems
export AUTOPROJ_OSDEPS_MODE
export AUTOPROJ_BOOTSTRAP_IGNORE_NONEMPTY_DIR=1

# Install yard early, some C++ packages with Ruby bindings will pick it up and
# use it to generate the Ruby binding documentation
if test "x$DOCGEN" = "xtrue"; then
    $GEM install rdoc yard --no-rdoc --no-ri
fi

# If there are no autoproj/ directory, we need to start by bootstrapping
if ! test -d dev/autoproj; then
    bootstrap_script_name=$(basename $BOOTSTRAP_URL)
    rm -f $bootstrap_script_name
    wget $BOOTSTRAP_URL
    mkdir -p dev
    ( set -ex
      cd dev
      $RUBY ../$bootstrap_script_name --no-color --no-progress "$@"
    )
fi

#additional build flags
BUILDFLAGS=""
if ! test -z "$PARALLEL"; then
    BUILDFLAGS+=" -p $PARALLEL"
fi

echo "Finished preparing, starting build at `date` with $RUBY"

# We can finally copy the requested config file and build
( set -ex
  cd dev
  . ./env.sh
  cp $configfile ./autoproj/config.yml
  
  autoproj --no-color --no-progress update
  autoproj --no-color --no-progress build $BUILDFLAGS
  touch successful
)

# Delete the stats file if we did not just do a full build
#
# Otherwise, generate the consolidated stats file
if test "x$do_incremental" = "x1"; then
    rm -f dev/install/log/stats.log
else
    `dirname $0`/consolidate_autoproj_stats dev/install/log/stats.log > dev/install/log/consolidated-stats.log
fi

if test "x$DOCGEN" = "xtrue"; then
    $GEM install hoe coderay rdoc --no-rdoc --no-ri
    $GEM install webgen -v 0.5.17 --no-rdoc --no-ri

    echo "Starting documentation generation at `date`"
    api_dir=$PWD/api
    # Only generate the documentation from autoproj. The complete documentation
    # is generated by a separate build target
    ( 
      cd dev
      . ./env.sh

      rm -rf $GEM_HOME/doc
      $GEM rdoc autoproj
      $GEM rdoc autobuild

      echo "generating the API documentation from the autoproj packages"
      autoproj doc --no-color
      # HACK: remove slam/pcl as we're low on space on the website and it is a
      # publicly available API documentation. We should have a way to specify a
      # link in the manifest.xml instead
      rm -rf install/doc/slam/pcl
      echo "copying API documentation to $api_dir"
      rsync -a --delete install/doc/ $api_dir/
      
      autoproj_version=`$RUBY -e "require 'autoproj'; puts Autoproj::VERSION"`
      autoproj_api_dir=$GEM_HOME/doc/autoproj-$autoproj_version
      if test -d $autoproj_api_dir; then
          echo "copying autoproj API documentation to $api_dir/autoproj"
          rsync -a --delete $autoproj_api_dir/rdoc/ $api_dir/autoproj/
      else
          echo "could not find the autoproj API in $autoproj_api_dir"
      fi
      
      autobuild_version=`$RUBY -e "require 'autobuild'; puts Autobuild::VERSION"`
      autobuild_api_dir=$GEM_HOME/doc/autobuild-$autobuild_version
      if test -d $autobuild_api_dir; then
          echo "copying autobuild API documentation to $api_dir/autobuild"
          rsync -a $autobuild_api_dir/rdoc/ $api_dir/autobuild/
      else
          echo "could not find the autobuild API in $autobuild_api_dir"
      fi
    ) > docgen.txt 2>&1
    echo "Finished documentation generation at `date`"
    touch dev/doc-successful
fi

# Save the logs AFTER documentation generation, so that they include docgen logs
# as well
mkdir -p logs
cp -r dev/install/log logs/`date +%F-%H%M%S`

if test "x$CLEAN_IF_SUCCESSFUL" = "xtrue"; then
    touch dev/cleaned

    if test -d dev/install/cache; then
        mkdir -p archive_cache
        rsync -a dev/install/cache/ archive_cache/
    fi
    rm -rf dev/install
    find dev -type d -name build -exec rm -rf {} \; -prune
    if test -d archive_cache; then
        mkdir -p dev/install/cache
        rsync -a archive_cache/ dev/install/cache/
    fi
fi
echo "Done at `date`"

